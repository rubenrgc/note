{"id":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","dependencies":[{"name":"/home/uk/Desktop/projects/web/package.json","includedInParent":true,"mtime":1626854181002},{"name":"/home/uk/Desktop/projects/web/.babelrc","includedInParent":true,"mtime":1626836853735},{"name":"/home/uk/Desktop/projects/web/node_modules/mdast-util-to-hast/package.json","includedInParent":true,"mtime":1626837851089},{"name":"unist-builder","loc":{"line":5,"column":16},"parent":"/home/uk/Desktop/projects/web/node_modules/mdast-util-to-hast/lib/handlers/code.js","resolved":"/home/uk/Desktop/projects/web/node_modules/unist-builder/index.js"}],"generated":{"js":"'use strict'\n\nmodule.exports = code\n\nvar u = require('unist-builder')\n\nfunction code(h, node) {\n  var value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  var lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  var props = {}\n  var code\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mdast-util-to-hast/lib/handlers/code.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"../node_modules/mdast-util-to-hast/lib/handlers/code.js":"'use strict'\n\nmodule.exports = code\n\nvar u = require('unist-builder')\n\nfunction code(h, node) {\n  var value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  var lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  var props = {}\n  var code\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n"},"lineCount":27}},"error":null,"hash":"8b32ea3450f0fe854e6d7d1e9d51048d","cacheData":{"env":{}}}